#BlueJ class context
comment0.target=Room
comment0.text=\r\n\ \ This\ class\ is\ the\ main\ class\ of\ the\ "The\ Rescue\ Circle"\ application.\ \r\n\ \ "The\ rescue\ Circle"\ is\ a\ very\ simple,\ text\ based\ adventure\ game.\ \ Users\ \r\n\ \ can\ walk\ around\ some\ scenery.\ That's\ all.\ It\ should\ really\ be\ extended\ \r\n\ \ to\ make\ it\ more\ interesting\!\r\n\ \r\n\ \ This\ main\ class\ creates\ and\ initialises\ all\ the\ others\:\ it\ creates\ all\r\n\ \ rooms,\ creates\ the\ parser\ and\ starts\ the\ game.\ \ It\ also\ evaluates\ and\r\n\ \ executes\ the\ commands\ that\ the\ parser\ returns.\r\n\ \r\n\ @author\ \ Janak\ Simkhada\r\n\ @version\ 27/01/2019\r\n
comment1.params=description
comment1.target=Room(java.lang.String)
comment1.text=\r\n\ Create\ a\ room\ described\ "description".\ Initially,\ it\ has\ no\ exits.\r\n\ "description"\ is\ something\ like\ "in\ a\ kitchen"\ or\ "in\ a\ carpark."\r\n
comment10.params=c\ inventory
comment10.target=Room\ respond(Command,\ java.util.ArrayList)
comment11.params=command\ inv
comment11.target=Room\ goRoom(Command,\ java.util.ArrayList)
comment11.text=\ \r\n\ Try\ to\ go\ to\ one\ direction.\ If\ there\ is\ an\ exit,\ enter\ the\ new\ room,\r\n\ otherwise\ print\ an\ error\ message.\r\n\ print\ long\ description\:\ if\ getExit()\ returns\ null,\ we\ can't\ go\ that\ way\r\n\ Note\ that\ there\ may\ be\ cases\ where\ getExit\ returns\ the\ same\ room\ as\ the\ one\ we're\ in;\r\n
comment12.params=c\ inventory
comment12.target=void\ doDrop(Command,\ java.util.ArrayList)
comment12.text=\r\n\ doDrop\:\ \r\n\ \ \ First,\ checks\ if\ user\ specified\ a\ thing\ to\ be\ dropped\r\n\ \ \ Second,\ checks\ that\ it's\ there\ in\ inventory\r\n\ \ \ Third,\ deletes\ that\ item\ from\ inventory,\ and\ adds\ to\ currentRoom\r\n\ \ \ Last,\ prints\ a\ message\ about\ it.\r\n
comment13.params=c\ inventory
comment13.target=void\ doTake(Command,\ java.util.ArrayList)
comment14.params=c\ inventory
comment14.target=void\ doWear(Command,\ java.util.ArrayList)
comment15.params=c\ inventory
comment15.target=void\ doDrink(Command,\ java.util.ArrayList)
comment16.params=c\ inventory
comment16.target=void\ doCall(Command,\ java.util.ArrayList)
comment2.params=direction\ neighbor
comment2.target=void\ setExit(java.lang.String,\ Room)
comment2.text=\r\n\ Define\ an\ exit\ from\ this\ room.\r\n
comment3.params=
comment3.target=java.lang.String\ getShortDescription()
comment3.text=\r\n\ Return\ the\ description\ of\ the\ room\ (the\ one\ that\ was\ defined\ in\ the\r\n\ constructor).\r\n
comment4.params=
comment4.target=java.lang.String\ getLongDescription()
comment4.text=\r\n\ Return\ a\ long\ description\ of\ this\ room,\ in\ the\ form\:\r\n\ \ \ \ \ You\ are\ in\ the\ bedroom.\r\n\ \ \ \ \ Exits\:\ north\ west\r\n
comment5.params=
comment5.target=java.lang.String\ getExitString()
comment5.text=\r\n\ Return\ a\ string\ describing\ the\ room's\ exits,\ for\ example\r\n\ "Exits\:\ north\ west".\r\n
comment6.params=direction
comment6.target=Room\ getExit(java.lang.String)
comment6.text=\r\n\ Return\ the\ room\ that\ is\ reached\ if\ we\ go\ from\ this\ room\ in\ direction\r\n\ "direction".\ If\ there\ is\ no\ room\ in\ that\ direction,\ return\ null.\r\n
comment7.params=i
comment7.target=void\ addItem(Item)
comment7.text=\r\n\ add\ an\ item\ to\ the\ room\r\n
comment8.params=
comment8.target=java.util.ArrayList\ getItems()
comment8.text=\r\n\ Get\ the\ whole\ list\r\n
comment9.params=s
comment9.target=void\ setDescription(java.lang.String)
numComments=17
